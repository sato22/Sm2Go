個ゼミメモ　20210726

condは別ファイルか

モデルの定義はあくまで基本のモデルの定義
詳細な条件は別のファイルに（日本語で書く場合もあるから）

モデルの構造を書くだけ
矢印　と　ステートに関する情報

entryProgに書くソースコード
イベントの条件として書くプログラムコード


【実装について】
実際に使う場面を想像しながら作らないと、
ユーザもどうしたらいいかわからなくなる！
想定しているステートマシンは？何をどう入力すればいい？
などなど、わからんことが多いとユーザが戸惑う。

私が今想定しているステートマシンは、
・ステート名
・イベント名
・矢印（どのステートがイベントによってどこにいくのか）
・初期状態
の情報のみのもの。
それ以外は詳細という扱いで、プログラムとして記述する。


【問題提起】
そもそも、図の情報のみ変更することで
プログラムも自動的に変更されるようにしたい。
図はプログラムの振る舞いを想定するために作られて、
大体のソースコードが書けてしまえば図を扱うこともないし、
ソースコードだけ変更して図はもう扱わないってことが多いので。

図もソースコードも一緒に変更したい。
ソースコード→図は難しいので、とりあえず図→ソースコードを自動化する。


state.jsonとかevent.jsonの

"State":[
    {
        "name":      "Wait",
        /*
    	"entryProg": "wait_test_entryProg",
    	"doProg":    "wait_test_doProg",
    	"exitProg":  "wait_test_exitProg"
    	*/
    }

とか
    
{
    "name":"push_button",
    "cond":"ecrobot_get_touch_sensor(NXT_PORT_TOUCH)==1"
}

の "entryProg", "doProg", "exitProg", "cond"　などの詳細部分は，他のgoファイルに書こう．
    


【具体的に】
func Wait_entry() {​​​
  // コメント
}​​​
→　今のentryProgに文字列として格納している部分
    関数で


func Push_button_cond() bool {​​​
// コメント
}​​​
→　output.goのpush_button関数でのイベントif文の部分
この関数はbool値を返すので，
if push_button_cond() {　みたいな感じになる


みたいに，該当部分は関数で記述する．

プログラムコードを文字列として処理するのは，
コードのエラーや挙動を確認できないので推奨できない．
ので，プログラム部分は別にgoファイルに書き込む
→その関数を呼び出すか、テキストとして関数内の処理を出力するかは自由
→最初は関数内の処理をべた書きしようかなとも思ってたけど、
　関数呼び出しの方が冗長にならなくていいかもな…という気になってきた。
　別のgoファイルで参照できた方が見やすいかな？


【なぜgolang？】
https://tinygo.org/
これはgolangで組込みプログラムをした例がいろいろのってるサイト
githubのexampleにソースコードがあるので，それを参考に
LEDともすやつは研究室にあるから、
実際に使ってみてもいいかもしれん。
なんでGo言語？って聞かれたら、実はGo言語での組込み開発も
あるんですよって感じで出したい


【xml形式で出力されたステートマシンを変換する】
→　xml形式をパースするライブラリもある
ただ，sm2goはjson形式で記述してるので、
xml形式のものも作成してxml形式を変換するときはそっちを使ってもらうとか…？
xmlをjson形式に変換するツールに通して、jsonファイルとして処理する？
どっちがいいんだろうなと思うけど、jsonファイルに変換するツール
を通すとなるとそれをユーザにインストールしてもらわないといけないからな…
それって手間じゃない…？
自分でxmlをjsonに変換するツールも実装するか、
xml用に整えたものも作成するか…
・xml用に整えたやつ準備する方が何倍も楽
