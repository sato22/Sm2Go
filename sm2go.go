package mxgraph

import (
	"fmt"
)

/*
【実装したもの】
・基本的なステートマシン図の変換を実装　〇
	→　 ・ステートマシン図の挙動をGo言語でどのように記述するか（sample.go, sample_edit.go）　〇
		・sampleを基に，ソースコードを出力する処理を記述　〇
・diagrams.netを用いて生成したXMLファイルから情報を取り出す　〇
・ステートマシン図から生成されたxmlファイルを基にソースコードを生成　〇
・二重構造のxmlファイルから情報を取り出す　〇

【これからすること】
・直接ファイルに出力する
・二重構造の変換を実装
	→　 ・ステートマシン図の挙動をGo言語でどのように記述するか（sample.go, sample_edit.go）
		・sampleを基に，ソースコードを出力する処理を記述
*/

func remove(transition_list []*Transition, state_name *State) []*Transition {
	ret := make([]*Transition, len(transition_list))
	i := 0

	for _, transition := range transition_list {
		if state_name != transition.Src {
			ret[i] = transition
			i++
		}
	}

	return ret[:i]
}

// ------------------------------　output.go　-----------------------------------

func write_package() {
	fmt.Println("// Please do not edit this file.")
	fmt.Println("// go run *.go")
	fmt.Println("")

	fmt.Println("package main")
	fmt.Println("")

	fmt.Println("import (")
	fmt.Println("\"fmt\"")
	fmt.Println(")")
	fmt.Println("")
}

func write_enum(state_list []*State) {
	// enum宣言
	fmt.Println("type State int")
	fmt.Println("const (")
	for index, state := range state_list {
		if index == 0 {
			fmt.Println(state.Name, "State = iota")
			continue
		}
		fmt.Println(state.Name)
	}
	fmt.Println(")")
	fmt.Println("")

	fmt.Println("type Eod int")
	fmt.Println("const (")
	fmt.Println("Entry Eod = iota\nDo\nExit\n)")
	fmt.Println("")

	fmt.Println("var input string")
	fmt.Println("var eod Eod")
	fmt.Println("var current_state State")
	fmt.Println("")
}

func write_event(transition_list []*Transition) {
	// 状態ごとの関数を作成
	fmt.Println("func task1() {")
	fmt.Println("switch current_state {")

	for _, transition := range transition_list {
		fmt.Printf("case %s:\n", transition.Src.Name)
		state_name := transition.Src
		// Entry状態での動作を記述
		fmt.Println("if eod == Entry {")
		fmt.Printf("%s_Entry()\n", transition.Src.Name)
		fmt.Println("eod = Do")
		fmt.Println("}") // if eod == Entry

		// Do状態での動作を記述
		fmt.Println("if eod == Do {")
		fmt.Printf("%s_Do()\n", transition.Src.Name)
		// 遷移条件を列挙
		for _, transition := range transition_list {
			if state_name == transition.Src {
				fmt.Printf("if %s_Cond() {\n", transition.Event.Name)
				fmt.Printf("current_state = %s\n", transition.Dest.Name)
				fmt.Printf("fmt.Println(\"State is changed: %s to %s\")\n", transition.Src.Name, transition.Dest.Name)
				fmt.Println("eod = Entry")
				fmt.Println("}") // if event_Cond()
			}
		}

		transition_list = remove(transition_list, state_name) // 表示したtransitionをリストから削除
		if len(transition_list) == 0 {
			break
		}
		fmt.Println("}") // if eod == Do
	}
	fmt.Println("}") // switch state
	fmt.Println("}") // func
	fmt.Println("}") // func
	fmt.Println("")
}

func write_init(initial *State) {
	fmt.Println("func init() {")
	fmt.Printf("current_state = %s\n", initial.Name)
	fmt.Println("eod = Entry")
	fmt.Println("}")
	fmt.Println("")
}

// ------------------------------　output_edit.go　-----------------------------------

func write_package_edit() {
	fmt.Println("// Please edit this file")
	fmt.Println("// go run *.go")
	fmt.Println("")

	fmt.Println("package main")
	fmt.Println("")

	fmt.Println("import (")
	fmt.Println("\"fmt\"")
	fmt.Println("\"time\"")
	fmt.Println(")")
	fmt.Println("")
}

func write_func(state_list []*State, event_list []*Event) {
	for _, state := range state_list {
		fmt.Printf("func %s_Entry() {\n", state.Name)
		fmt.Println("// nothing to do")
		fmt.Println("}")
		fmt.Println("")

		fmt.Printf("func %s_Do() {\n", state.Name)
		fmt.Println("// nothing to do")
		fmt.Println("}")
		fmt.Println("")

		fmt.Printf("func %s_Exit() {\n", state.Name)
		fmt.Println("// nothing to do")
		fmt.Println("}")
		fmt.Println("")
	}

	for _, event := range event_list {
		fmt.Printf("func %s_Cond() bool {\n", event.Name)
		fmt.Printf("// Please write the conditions under which a state transitions\n")
		fmt.Println("return false")
		fmt.Println("}")
		fmt.Println("")
	}

}

func write_main() {
	fmt.Println("func main() {")
	fmt.Println("go func() {")
	fmt.Println("for {")
	fmt.Println("time.Sleep(1 * time.Millisecond)")
	fmt.Println("task1()")
	fmt.Println("}")
	fmt.Println("}()")
	fmt.Println("for {")
	fmt.Println("fmt.Scan(&input)")
	fmt.Println("if input == \"q\" {")
	fmt.Println("fmt.Println(\"quit\")")
	fmt.Println("break")
	fmt.Println("}")
	fmt.Println("}")
	fmt.Println("}")
	fmt.Println("")
}
