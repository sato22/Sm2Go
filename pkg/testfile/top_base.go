package modelTest

// Please do not edit this file.

// package name to import

const (
	debug = true
)

type TopState int

const (
	AlarmOn TopState = iota
	Countdown
	TimerSet
	NotSet
)

type Eod int

const (
	Entry Eod = iota
	Do
	Exit
)

var topeod Eod
var topCurrentState TopState

func TopStep() {
	switch topCurrentState {
	case AlarmOn:
		if topeod == Entry {
			alarmonEntry()
			topeod = Do
		}
		if topeod == Do {
			alarmonDo()
			if pushStartStopButtonCond() {
				topCurrentState = NotSet
				if debug {
					logger.Println("State is changed: AlarmOn to NotSet")
				}
				topeod = Exit
			}
		}
		if topeod == Exit {
			alarmonExit()
			topeod = Entry
		}
	case Countdown:
		if topeod == Entry {
			countdownEntry()
			topeod = Do
		}
		if topeod == Do {
			countdownDo()
			if countdownEndCond() {
				topCurrentState = AlarmOn
				if debug {
					logger.Println("State is changed: Countdown to AlarmOn")
				}
				topeod = Exit
			}
			if pushStartStopButtonCond() {
				topCurrentState = TimerSet
				if debug {
					logger.Println("State is changed: Countdown to TimerSet")
				}
				topeod = Exit
			}
		}
		if topeod == Exit {
			countdownExit()
			topeod = Entry
		}
	case TimerSet:
		if topeod == Entry {
			timersetEntry()
			topeod = Do
		}
		if topeod == Do {
			timersetDo()
			if pushStartStopButtonCond() {
				topCurrentState = Countdown
				if debug {
					logger.Println("State is changed: TimerSet to Countdown")
				}
				topeod = Exit
			}
		}
		if topeod == Exit {
			timersetExit()
			topeod = Entry
		}
	case NotSet:
		if topeod == Entry {
			notsetEntry()
			topeod = Do
		}
		if topeod == Do {
			notsetDo()
			if pushTimerButtonCond() {
				topCurrentState = TimerSet
				if debug {
					logger.Println("State is changed: NotSet to TimerSet")
				}
				topeod = Exit
			}
		}
		if topeod == Exit {
			notsetExit()
			topeod = Entry
		}
	}
}

func init() {
	topCurrentState = NotSet
	topeod = Entry
}
