package sm2go

import (
	"fmt"
	"strings"
)

const (
	debugLog          = false
	debugTest          = false
)

/*
【実装したもの】
・基本的なステートマシン図の変換を実装　〇
	→　 ・ステートマシン図の挙動をGo言語でどのように記述するか（sample.go, sample_edit.go）　〇
		・sampleを基に，ソースコードを出力する処理を記述　〇
・diagrams.netを用いて生成したXMLファイルから情報を取り出す　〇
・ステートマシン図から生成されたxmlファイルを基にソースコードを生成　〇
・合成状態から情報を取り出す　〇
・コマンドラインツールとしての機能を実装 〇
・直接ファイルに出力する 〇

【すること】
・合成状態の変換を実装
	→　 ・ステートマシン図の挙動をGo言語でどのように記述するか（sample.go, sample_edit.go）
		・sampleを基に，ソースコードを出力する処理を記述
*/

func remove(transition_list []*Transition, state_name *State) []*Transition {
	ret := make([]*Transition, len(transition_list))
	i := 0

	for _, transition := range transition_list {
		if state_name != transition.Src {
			ret[i] = transition
			i++
		}
	}

	return ret[:i]
}

// ------------------------------　modelBase.go　-----------------------------------

func writePackage(oline []string, name string) []string {
	oline = append(oline, "// Please do not edit this file.\n")
	oline = append(oline, "\n")

	if debugTest{
		oline = append(oline, fmt.Sprintf("package %s\n", name))
	} else {
		oline = append(oline, "package main\n")
	}
	oline = append(oline, "\n")

	oline = append(oline, "import (\n")
	if debugLog{
		oline = append(oline, "\"log\"\n")
	}else{
		oline = append(oline, "// package name to import\n")
	}
	oline = append(oline, ")\n")
	oline = append(oline, "\n")

	return oline
}

// enum宣言
func writeEnum(oline []string, state_list []*State) []string {
	oline = append(oline, "type State int\n")
	oline = append(oline, "const (\n")
	for index, state := range state_list {
		if index == 0 {
			oline = append(oline, fmt.Sprintf("%s State = iota\n", state.Name))
			continue
		}
		oline = append(oline, fmt.Sprintf("%s\n", state.Name))
	}
	oline = append(oline, ")\n")
	oline = append(oline, "\n")

	oline = append(oline, "type Eod int\n")
	oline = append(oline, "const (\n")
	oline = append(oline, "Entry Eod = iota\nDo\nExit\n)\n")
	oline = append(oline, "\n")

	oline = append(oline, "var eod Eod\n")
	oline = append(oline, "var current State\n")
	oline = append(oline, "\n")

	return oline
}

// task関数の生成
func writeEvent(oline []string, transition_list []*Transition) []string {
	// 状態ごとの関数を作成
	oline = append(oline, "func task() {\n")
	oline = append(oline, "switch current {\n")

	for _, transition := range transition_list {
		oline = append(oline, fmt.Sprintf("case %s:\n", transition.Src.Name))
		state_name := transition.Src
		// Entry状態での動作を記述
		oline = append(oline, "if eod == Entry {\n")
		oline = append(oline, fmt.Sprintf("%sEntry()\n", strings.ToLower(transition.Src.Name)))
		oline = append(oline, "eod = Do\n")
		oline = append(oline, "}\n") // if eod == Entry

		// Do状態での動作を記述
		oline = append(oline, "if eod == Do {\n")
		oline = append(oline, fmt.Sprintf("%sDo()\n", strings.ToLower(transition.Src.Name)))
		// 遷移条件を列挙
		for _, transition := range transition_list {
			if state_name == transition.Src {
				oline = append(oline, fmt.Sprintf("if %sCond() {\n", transition.Event.Name))
				oline = append(oline, fmt.Sprintf("current = %s\n", transition.Dest.Name))
				if debugLog{
					oline = append(oline, fmt.Sprintf("log.Println(\"State is changed: %s to %s\")\n", transition.Src.Name, transition.Dest.Name))
				}
				oline = append(oline, "eod = Entry\n")
				oline = append(oline, "}\n") // if event_Cond()
			}
		}
	
		oline = append(oline, "}\n") // if eod == Do

		// Exit状態での動作を記述
		oline = append(oline, "if eod == Exit {\n")
		oline = append(oline, fmt.Sprintf("%sExit()\n", strings.ToLower(transition.Src.Name)))
		oline = append(oline, "eod = Entry\n")
		oline = append(oline, "}\n") // if eod == Exit

		transition_list = remove(transition_list, state_name) // 表示したtransitionをリストから削除
		if len(transition_list) == 0 {
			break
		}
	}
	oline = append(oline, "}\n") // switch state
	oline = append(oline, "}\n") // func
	oline = append(oline, "\n")

	return oline
}

// ステートの初期化
func writeInit(oline []string, initial *State) []string {
	oline = append(oline, "func init() {\n")
	oline = append(oline, fmt.Sprintf("current = %s\n", initial.Name))
	oline = append(oline, "eod = Entry\n")
	oline = append(oline, "}\n")
	oline = append(oline, "\n")

	return oline
}

// ------------------------------　output_edit.go　-----------------------------------

// パッケージ名，インポート
func writePackageEdit(oeline []string, name string) []string {
	oeline = append(oeline, "// Please edit this file\n")
	oeline = append(oeline, "\n")

	if debugTest{
		oeline = append(oeline, fmt.Sprintf("package %s\n", name))
	}else{
		oeline = append(oeline, "package main\n")
	}
	oeline = append(oeline, "\n")

	oeline = append(oeline, "import (\n")
	oeline = append(oeline, "// package name to import\n")
	oeline = append(oeline, ")\n")
	oeline = append(oeline, "\n")

	return oeline
}

// modelBase.goにて使用する関数を表記
func writeFunc(oeline []string, state_list []*State, event_list []*Event) []string {
	for _, state := range state_list {
		oeline = append(oeline, fmt.Sprintf("func %sEntry() {\n", strings.ToLower(state.Name)))
		oeline = append(oeline, "// nothing to do\n")
		oeline = append(oeline, "}\n")
		oeline = append(oeline, "\n")

		oeline = append(oeline, fmt.Sprintf("func %sDo() {\n", strings.ToLower(state.Name)))
		oeline = append(oeline, "// nothing to do\n")
		oeline = append(oeline, "}\n")
		oeline = append(oeline, "\n")

		oeline = append(oeline, fmt.Sprintf("func %sExit() {\n", strings.ToLower(state.Name)))
		oeline = append(oeline, "// nothing to do\n")
		oeline = append(oeline, "}\n")
		oeline = append(oeline, "\n")
	}

	for _, event := range event_list {
		oeline = append(oeline, fmt.Sprintf("func %sCond() bool {\n", event.Name))
		oeline = append(oeline, "// Please write the conditions under which a state transitions\n")
		oeline = append(oeline, "return true\n")
		oeline = append(oeline, "}\n")
		oeline = append(oeline, "\n")
	}

	return oeline
}

// テストファイルを生成
func writeTest(otline []string, name string) []string {
	otline = append(otline, "// This is a test file for testing state transitions\n")
	otline = append(otline, "\n")

	if debugTest{
		otline = append(otline, fmt.Sprintf("package %s_test\n", name))
	} else {
		otline = append(otline, "package main_test\n")
	}
	otline = append(otline, "\n")

	otline = append(otline, "import (\n")
	otline = append(otline, "\"testing\"\n")
	otline = append(otline, "\"time\"\n")
	otline = append(otline, "\"sync\"\n")
	otline = append(otline, ")\n")
	otline = append(otline, "\n")

	otline = append(otline, "func TestStateTrans(t *testing.T) {\n")
	otline = append(otline, "var wg sync.WaitGroup\n")
	otline = append(otline, "wg.Add(1)\n")
	otline = append(otline, "go func() {\n")
	otline = append(otline, "for {\n")
	otline = append(otline, "time.Sleep(1 * time.Millisecond)\n")
	otline = append(otline, "task()\n")
	otline = append(otline, "}\n")
	otline = append(otline, "wg.Done()\n")
	otline = append(otline, "}()\n")
	otline = append(otline, "wg.Wait()\n")
	otline = append(otline, "}\n")
	otline = append(otline, "\n")

	return otline
}

// main.goにて実行する関数
func WriteAll(data []byte, name string) ([]string, []string, []string) {
	var oline []string
	var oeline []string
	var otline []string

	result := Parse(data)
	for _, v := range result {
		// ------------------------------　model_base.go　-----------------------------------
		oline = writePackage(oline, name)
		oline = writeEnum(oline, v.States)
		oline = writeEvent(oline, v.Transitions)
		oline = writeInit(oline, v.Initial)
		// ------------------------------　model_impl.go　-----------------------------------
		oeline = writePackageEdit(oeline, name)
		oeline = writeFunc(oeline, v.States, v.Events)
		// ------------------------------　model_test.go　-----------------------------------
		otline = writeTest(otline, name)
	}

	return oline, oeline, otline
}
