package sm2go

import (
	"fmt"
	"strings"
)

const (
	debugLog  = false
	debugTest = false
)

func remove(transition_list []*Transition, state_name *State) []*Transition {
	ret := make([]*Transition, len(transition_list))
	i := 0

	for _, transition := range transition_list {
		if state_name != transition.Src {
			ret[i] = transition
			i++
		}
	}

	return ret[:i]
}

// ------------------------------　hogehoge_base.go　-----------------------------------

func writePackage(oline []string, name string) []string {
	oline = append(oline, "// Please do not edit this file.\n")
	oline = append(oline, "\n")

	oline = append(oline, fmt.Sprintf("package %s\n", name))
	oline = append(oline, "\n")

	oline = append(oline, "import (\n")
	oline = append(oline, "// package name to import\n")
	oline = append(oline, ")\n")
	oline = append(oline, "\n")

	oline = append(oline, "const (\n")
	oline = append(oline, "debug = true\n")
	oline = append(oline, ")\n")
	oline = append(oline, "\n")

	return oline
}

// enum宣言
func writeEnum(oline []string, state_list []*State) []string {
	oline = append(oline, "type State int\n")
	oline = append(oline, "const (\n")
	for index, state := range state_list {
		if index == 0 {
			oline = append(oline, fmt.Sprintf("%s State = iota\n", state.Name))
			continue
		}
		oline = append(oline, fmt.Sprintf("%s\n", state.Name))
	}
	oline = append(oline, ")\n")
	oline = append(oline, "\n")

	oline = append(oline, "type Eod int\n")
	oline = append(oline, "const (\n")
	oline = append(oline, "Entry Eod = iota\nDo\nExit\n)\n")
	oline = append(oline, "\n")

	oline = append(oline, "var eod Eod\n")
	oline = append(oline, "var current State\n")
	oline = append(oline, "\n")

	return oline
}

// task関数の生成
func writeEvent(oline []string, transition_list []*Transition) []string {
	// 状態ごとの関数を作成
	oline = append(oline, "func Task() {\n")
	oline = append(oline, "switch current {\n")

	for _, transition := range transition_list {
		state_name := transition.Src
		if state_name == transition.Src {
			oline = append(oline, fmt.Sprintf("case %s:\n", transition.Src.Name))
			// Entry状態での動作を記述
			oline = append(oline, "if eod == Entry {\n")
			oline = append(oline, fmt.Sprintf("%sEntry()\n", strings.ToLower(transition.Src.Name)))
			oline = append(oline, "eod = Do\n")
			oline = append(oline, "}\n") // if eod == Entry

			// Do状態での動作を記述
			oline = append(oline, "if eod == Do {\n")
			oline = append(oline, fmt.Sprintf("%sDo()\n", strings.ToLower(transition.Src.Name)))
			// 遷移条件を列挙
			for _, transition := range transition_list {
				if state_name == transition.Src {
					oline = append(oline, fmt.Sprintf("if %sCond() {\n", transition.Event.Name))
					oline = append(oline, fmt.Sprintf("current = %s\n", transition.Dest.Name))
					oline = append(oline, fmt.Sprintf("if debug {\n"))
					oline = append(oline, fmt.Sprintf("logger.Println(\"State is changed: %s to %s\")\n", transition.Src.Name, transition.Dest.Name))
					oline = append(oline, fmt.Sprintf("}\n"))
					oline = append(oline, "eod = Exit\n")
					oline = append(oline, "}\n") // if event_Cond()
				}
			}

			oline = append(oline, "}\n") // if eod == Do

			// Exit状態での動作を記述
			oline = append(oline, "if eod == Exit {\n")
			oline = append(oline, fmt.Sprintf("%sExit()\n", strings.ToLower(transition.Src.Name)))
			oline = append(oline, "eod = Entry\n")
			oline = append(oline, "}\n") // if eod == Exit

			transition_list = remove(transition_list, state_name) // 表示したtransitionをリストから削除
			if len(transition_list) == 0 {
				break
			}
		}
	}
	oline = append(oline, "}\n") // switch state
	oline = append(oline, "}\n") // func
	oline = append(oline, "\n")

	return oline
}

// ステートの初期化
func writeInit(oline []string, initial *State) []string {
	oline = append(oline, "func init() {\n")
	oline = append(oline, fmt.Sprintf("current = %s\n", initial.Name))
	oline = append(oline, "eod = Entry\n")
	oline = append(oline, "}\n")
	oline = append(oline, "\n")

	return oline
}

// ------------------------------　hogehoge_impl.go　-----------------------------------

// パッケージ名，インポート
func writePackageEdit(oeline []string, name string) []string {
	oeline = append(oeline, "// Please edit this file\n")
	oeline = append(oeline, "\n")

	oeline = append(oeline, fmt.Sprintf("package %s\n", name))
	oeline = append(oeline, "\n")

	oeline = append(oeline, "import (\n")
	oeline = append(oeline, "// package name to import\n")
	oeline = append(oeline, ")\n")
	oeline = append(oeline, "\n")

	oeline = append(oeline, "type DebugLogger interface {\n")
	oeline = append(oeline, "Println(string)\n")
	oeline = append(oeline, "}\n")
	oeline = append(oeline, "\n")

	oeline = append(oeline, "var logger DebugLogger\n")
	oeline = append(oeline, "\n")

	oeline = append(oeline, "func ConfigureLog(p DebugLogger) {\n")
	oeline = append(oeline, "logger = p\n")
	oeline = append(oeline, "}\n")
	oeline = append(oeline, "\n")

	return oeline
}

// modelBase.goにて使用する関数を表記
func writeFunc(oeline []string, state_list []*State, event_list []*Event) []string {
	for _, state := range state_list {
		oeline = append(oeline, fmt.Sprintf("func %sEntry() {\n", strings.ToLower(state.Name)))
		oeline = append(oeline, "// nothing to do\n")
		oeline = append(oeline, "}\n")
		oeline = append(oeline, "\n")

		oeline = append(oeline, fmt.Sprintf("func %sDo() {\n", strings.ToLower(state.Name)))
		oeline = append(oeline, "// nothing to do\n")
		oeline = append(oeline, "}\n")
		oeline = append(oeline, "\n")

		oeline = append(oeline, fmt.Sprintf("func %sExit() {\n", strings.ToLower(state.Name)))
		oeline = append(oeline, "// nothing to do\n")
		oeline = append(oeline, "}\n")
		oeline = append(oeline, "\n")
	}

	for _, event := range event_list {
		oeline = append(oeline, fmt.Sprintf("func %sCond() bool {\n", event.Name))
		oeline = append(oeline, "// Please write the conditions under which a state transitions\n")
		oeline = append(oeline, "return true\n")
		oeline = append(oeline, "}\n")
		oeline = append(oeline, "\n")
	}

	return oeline
}

// ------------------------------　hogehoge_test.go　-----------------------------------
// テストファイルを生成
func writeTest(otline []string, name string) []string {
	otline = append(otline, "// This is a test file for testing state transitions\n")
	otline = append(otline, "\n")

	otline = append(otline, fmt.Sprintf("package %s\n", name))
	otline = append(otline, "\n")

	otline = append(otline, "import (\n")
	otline = append(otline, "\"log\"\n")
	otline = append(otline, "\"testing\"\n")
	otline = append(otline, "\"time\"\n")
	otline = append(otline, "\"sync\"\n")
	otline = append(otline, ")\n")
	otline = append(otline, "\n")

	// log.Println()
	otline = append(otline, "type DebugStruct struct{}\n")
	otline = append(otline, "var logTest = DebugStruct{}\n")
	otline = append(otline, "func (l DebugStruct) Println(debstr string) {\n")
	otline = append(otline, "log.Println(debstr)\n")
	otline = append(otline, "}\n")

	otline = append(otline, "func TestDevice(t *testing.T) {\n")
	otline = append(otline, "env := sm2go.NewTestEnv() // TestEnv構造体\n")
	otline = append(otline, "\n")

	otline = append(otline, "// goroutine(base.go Task())\n")
	otline = append(otline, "env.Add(sm2go.Continue, func() {\n")
	otline = append(otline, "for {\n")
	otline = append(otline, "time.Sleep(10 * time.Millisecond)\n")
	otline = append(otline, "Task()\n")
	otline = append(otline, "}\n")
	otline = append(otline, "},\n")
	otline = append(otline, ")\n")

	otline = append(otline, "// goroutine(user operation)\n")
	otline = append(otline, "env.Add(sm2go.Done, func() {\n")
	otline = append(otline, "},\n")
	otline = append(otline, ")\n")
	otline = append(otline, "\n")

	otline = append(otline, "env.Set(1)\n")
	otline = append(otline, "env.Go()\n")
	otline = append(otline, "}\n")
	otline = append(otline, "\n")

	return otline
}

// ------------------------------　sm2go.go　-----------------------------------
//　ライブラリを生成
func writeSm(osline []string) []string {
	osline = append(osline, "package sm2go\n")

	osline = append(osline, "import (\n")
	osline = append(osline, "\"time\"\n")
	osline = append(osline, "\"sync\"\n")
	osline = append(osline, ")\n")

	osline = append(osline, "type Tasktype int\n")

	osline = append(osline, "const (\n")
	osline = append(osline, "Done Tasktype = iota\n")
	osline = append(osline, "Continue\n")
	osline = append(osline, ")\n")

	osline = append(osline, "type TestEnv struct {\n")
	osline = append(osline, "task      []func()\n")
	osline = append(osline, "wg        *sync.WaitGroup\n")
	osline = append(osline, "timescale time.Duration\n")
	osline = append(osline, "}\n")

	osline = append(osline, "func NewTestEnv() *TestEnv {\n")
	osline = append(osline, "return &TestEnv{\n")
	osline = append(osline, "task:      []func(){},\n")
	osline = append(osline, "wg:        &sync.WaitGroup{},\n")
	osline = append(osline, "timescale: 1,\n")
	osline = append(osline, "}\n")
	osline = append(osline, "}\n")

	osline = append(osline, "func (t *TestEnv) Add(tasktype Tasktype, x func()) {\n")
	osline = append(osline, "switch tasktype {\n")
	osline = append(osline, "case Done:\n")
	osline = append(osline, "t.wg.Add(1)\n")
	osline = append(osline, "t.task = append(t.task, func() {\n")
	osline = append(osline, "defer t.wg.Done()\n")
	osline = append(osline, "x()\n")
	osline = append(osline, "})\n")
	osline = append(osline, "case Continue:\n")
	osline = append(osline, "t.task = append(t.task, x)\n")
	osline = append(osline, "}\n")
	osline = append(osline, "}\n")

	osline = append(osline, "func (t *TestEnv) Set(i time.Duration) {\n")
	osline = append(osline, "t.timescale = i\n")
	osline = append(osline, "}\n")

	osline = append(osline, "func (t *TestEnv) Go() {\n")
	osline = append(osline, "for _, x := range t.task {\n")
	osline = append(osline, "go x()\n")
	osline = append(osline, "}\n")
	osline = append(osline, "t.wg.Wait()\n")
	osline = append(osline, "}\n")

	osline = append(osline, "func (t *TestEnv) Sleep(h time.Duration) {\n")
	osline = append(osline, "time.Sleep(h * t.timescale)\n")
	osline = append(osline, "}\n")

	osline = append(osline, "func (t *TestEnv) Tick(i time.Duration) <-chan time.Time {\n")
	osline = append(osline, "return time.Tick(i * t.timescale)\n")
	osline = append(osline, "}\n")

	osline = append(osline, "func (t *TestEnv) After(i time.Duration) <-chan time.Time {\n")
	osline = append(osline, "return time.After(i * t.timescale)\n")
	osline = append(osline, "}\n")

	return osline
}

// ------------------------------　main.go　-----------------------------------
func writePackageMain(omline []string) []string {
	omline = append(omline, "// main file\n")
	omline = append(omline, "\n")

	omline = append(omline, "package main\n")
	omline = append(omline, "\n")

	omline = append(omline, "import (\n")
	omline = append(omline, "\"machine\"\n")
	omline = append(omline, "\"time\"\n")
	omline = append(omline, ")\n")
	omline = append(omline, "\n")

	return omline
}

func writeMain(omline []string) []string {
	omline = append(omline, "type DebugStruct struct{}\n")
	omline = append(omline, "var logTest = DebugStruct{}\n")
	omline = append(omline, "func (l DebugStruct) Println(debstr string) {\n")
	omline = append(omline, "println(debstr)\n")
	omline = append(omline, "}\n")

	omline = append(omline, "func main() {\n")
	omline = append(omline, "for {\n")
	omline = append(omline, "Task()\n")
	omline = append(omline, "time.sleep(time.Millisecond * 10)\n")
	omline = append(omline, "}\n")
	omline = append(omline, "}\n")
	omline = append(omline, "\n")

	return omline
}

// main.goにて実行する関数
func WriteAll(data []byte, name string) ([]string, []string, []string, []string, []string) {
	var oline []string
	var oeline []string
	var otline []string
	var osline []string
	var omline []string

	result := Parse(data)
	for _, v := range result {
		// ------------------------------　model_base.go　-----------------------------------
		oline = writePackage(oline, name)
		oline = writeEnum(oline, v.States)
		oline = writeEvent(oline, v.Transitions)
		oline = writeInit(oline, v.Initial)
		// ------------------------------　model_impl.go　-----------------------------------
		oeline = writePackageEdit(oeline, name)
		oeline = writeFunc(oeline, v.States, v.Events)
		// ------------------------------　model_test.go　-----------------------------------
		otline = writeTest(otline, name)
		// ------------------------------　sm2go.go　-----------------------------------
		osline = writeSm(osline)
		// ------------------------------　main.go　-----------------------------------
		omline = writePackageMain(omline)
		omline = writeMain(omline)
	}

	return oline, oeline, otline, omline, osline
}
