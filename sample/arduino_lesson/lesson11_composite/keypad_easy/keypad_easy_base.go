// Please do not edit this file.

package keypad_easy

// package name to import

const (
	debug = true
)

type State int

const (
	On State = iota
	Off
)

type Eod int

const (
	Entry Eod = iota
	Do
	Exit
)

var eod Eod
var current State

// 出力結果
// v.States &{On}
// v.States &{Off}
// v.Transitions &{0xc000088ad0 0xc000088b10 0xc000088c20}
// v.Transitions &{0xc000088b10 0xc000088ad0 0xc000088c60}
// v.Initial &{Off}
// v.Events &{time3sec}
// v.Events &{correctKey}
// v.States &{OffEntered}
// v.States &{OffEmpty}
// v.Transitions &{0xc000088ba0 0xc000088b60 0xc000088c90}
// v.Transitions &{0xc000088b60 0xc000088ba0 0xc000088cc0}
// v.Initial &{OffEmpty}
// v.Events &{keyFailed}
// v.Events &{keyEntered}
// PASS

// 領域ごとの状態名，イベント名，遷移先などすべて出力できている．
// 状態名が分かれて出力されている．
// 全体の領域と状態の中の領域の区別がついていない（Task関数の名称，現在の状態を表す変数currentの区別など）

func Task() {
	switch current {
	case On:
		if eod == Entry {
			onEntry()
			eod = Do
		}
		if eod == Do {
			onDo()
			if time3secCond() {
				current = Off
				if debug {
					logger.Println("State is changed: On to Off")
				}
				eod = Exit
			}
		}
		if eod == Exit {
			onExit()
			eod = Entry
		}
	case Off:
		if eod == Entry {
			offEntry()
			eod = Do
		}
		if eod == Do {
			offDo()
			if correctKeyCond() {
				current = On
				if debug {
					logger.Println("State is changed: Off to On")
				}
				eod = Exit
			}
		}
		if eod == Exit {
			offExit()
			eod = Entry
		}
	}
}

func init() {
	current = Off
	eod = Entry
}

// Please do not edit this file.

// package keypad_easy

// import (
// // package name to import
// )

// const (
// debug = true
// )

// type State int
// const (
// OffEntered State = iota
// OffEmpty
// )

// type Eod int
// const (
// Entry Eod = iota
// Do
// Exit
// )

// var eod Eod
// var current State

func Task2() {
	switch current {
	case OffEmpty:
		if eod == Entry {
			offemptyEntry()
			eod = Do
		}
		if eod == Do {
			offemptyDo()
			if keyFailedCond() {
				current = OffEntered
				if debug {
					logger.Println("State is changed: OffEmpty to OffEntered")
				}
				eod = Exit
			}
		}
		if eod == Exit {
			offemptyExit()
			eod = Entry
		}
	case OffEntered:
		if eod == Entry {
			offenteredEntry()
			eod = Do
		}
		if eod == Do {
			offenteredDo()
			if keyEnteredCond() {
				current = OffEmpty
				if debug {
					logger.Println("State is changed: OffEntered to OffEmpty")
				}
				eod = Exit
			}
		}
		if eod == Exit {
			offenteredExit()
			eod = Entry
		}
	}
}

func init() {
	current = OffEmpty
	eod = Entry
}
