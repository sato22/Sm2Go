// Please do not edit this file.

package keypad_easy

// package name to import

const (
	debug = true
)

// グローバル変数で扱うのをやめる
// 		クラスのような扱い？
// パッケージで領域を分ける！
// 1つのステートマシンごとに1つのファイルが原則

// type State1(parent名) int　　とか？
type State int

const (
	On State = iota
	Off
	OffEntered
	OffEmpty
	// OffEntered, OffEmptyは付け足した．
)

// Entryあたりはこのままでも
type Eod int

const (
	Entry Eod = iota
	Do
	Exit
)

var eod Eod
var current State

// 出力結果
// v.States &{On}
// v.States &{Off}
// v.Transitions &{0xc000088ad0 0xc000088b10 0xc000088c20}
// v.Transitions &{0xc000088b10 0xc000088ad0 0xc000088c60}
// v.Initial &{Off}
// v.Events &{time3sec}
// v.Events &{correctKey}
// v.States &{OffEntered}
// v.States &{OffEmpty}
// v.Transitions &{0xc000088ba0 0xc000088b60 0xc000088c90}
// v.Transitions &{0xc000088b60 0xc000088ba0 0xc000088cc0}
// v.Initial &{OffEmpty}
// v.Events &{keyFailed}
// v.Events &{keyEntered}
// PASS

// 領域ごとの状態名，イベント名，遷移先などすべて出力できている．
// 領域ごとにパッケージ名などが作成されるので，エラーが発生する．
// 全体の領域と状態の中の領域の区別がついていない（Task関数の名称，現在の状態を表す変数currentの区別など）

// 直交状態は扱う，並行で処理はか

func Step() {
	// func Step()　〇
	// func Run()
	switch current {
	case On:
		if eod == Entry {
			onEntry()
			eod = Do
		}
		if eod == Do {
			onDo()
			if time3secCond() {
				current = Off
				if debug {
					logger.Println("State is changed: On to Off")
				}
				eod = Exit
			}
		}
		if eod == Exit {
			onExit()
			eod = Entry
		}
	case Off:
		if eod == Entry {
			offEntry()
			eod = Do
		}
		if eod == Do {
			offDo()
			ko.Task() // 親のDo状態で子のtaskをまわす．これだとif文がいらない．
			ko2.Task()
			// OffEntryアクションで，ko.init()を実行すると，子の領域の状態が初期状態に戻る

			if correctKeyCond() {
				current = On
				if debug {
					logger.Println("State is changed: Off to On")
				}
				eod = Exit
			}
		}
		if eod == Exit {
			offExit()
			eod = Entry
		}
	}
}

func init() {
	current = Off
	eod = Entry
}

// Please do not edit this file.

// package keypad_easy

// import (
// // package name to import
// )

// const (
// debug = true
// )

// type State int
// const (
// OffEntered State = iota
// OffEmpty
// )

// type Eod int
// const (
// Entry Eod = iota
// Do
// Exit
// )

// var eod Eod
// var current State

// eodSmall, currentSmallを追加
var eodSmall Eod
var currentSmall State

func Task2() {
	if current == Off {
		// この領域を含む状態にいることが条件なので，「この状態下にいる時」という旨のif文が必要！
		switch currentSmall {
		case OffEmpty:
			if eodSmall == Entry {
				offemptyEntry()
				eodSmall = Do
			}
			if eodSmall == Do {
				offemptyDo()
				if keyEnteredCond() {
					currentSmall = OffEntered
					if debug {
						logger.Println("State is changed: OffEmpty to OffEntered")
					}
					eodSmall = Exit
				}
			}
			if eodSmall == Exit {
				offemptyExit()
				eodSmall = Entry
			}
		case OffEntered:
			if eodSmall == Entry {
				offenteredEntry()
				eodSmall = Do
			}
			if eodSmall == Do {
				offenteredDo()
				if keyFailedCond() {
					currentSmall = OffEmpty
					if debug {
						logger.Println("State is changed: OffEntered to OffEmpty")
					}
					eodSmall = Exit
				}
			}
			if eod == Exit {
				offenteredExit()
				eod = Entry
			}
		}
	}
}

func init() {
	currentSmall = OffEmpty
	eodSmall = Entry
}
