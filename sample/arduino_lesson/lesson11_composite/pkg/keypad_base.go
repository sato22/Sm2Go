// Please do not edit this file.

package pkg

const (
	debug = true
)

type State int

const (
	On State = iota
	Off
	OffEmpty
	OffEntered
)

type Eod int

const (
	Entry Eod = iota
	Do
	Exit
)

var eodBig Eod
var eodSmall Eod
var currentBig State
var currentSmall State

func Task() {
	switch currentBig {
	case On:
		if eodBig == Entry {
			onEntry()
			eodBig = Do
		}
		if eodBig == Do {
			onDo()
			if time3secCond() {
				currentBig = Off
				if debug {
					logger.Println("State is changed: On to Off")
				}
				eodBig = Exit
			}
		}
		if eodBig == Exit {
			onExit()
			eodBig = Entry
		}
	case Off:
		if eodBig == Entry {
			offEntry()
			eodBig = Do
		}
		if eodBig == Do {
			offDo()
			if correctKeyCond() {
				currentBig = On
				if debug {
					logger.Println("State is changed: Off to On")
				}
				eodBig = Exit
			}
		}
		if eodBig == Exit {
			offExit()
			eodBig = Entry
		}
	}
}

func Task2() {
	if currentBig == Off {
		switch currentSmall {
		case OffEmpty:
			if eodSmall == Entry {
				offEmptyEntry()
				eodSmall = Do
			}
			if eodSmall == Do {
				offEmptyDo()
				if keyEnteredCond() {
					currentSmall = OffEntered
					if debug {
						logger.Println("State is changed: OffEmpty to OffEntered")
					}
					eodSmall = Exit
				}
			}
			if eodSmall == Exit {
				offEmptyExit()
				eodSmall = Entry
			}
		case OffEntered:
			if eodSmall == Entry {
				offEnteredEntry()
				eodSmall = Do
			}
			if eodSmall == Do {
				offEnteredDo()
				if keyFailedCond() {
					currentSmall = OffEmpty
					if debug {
						logger.Println("State is changed: OffEntered to OffEmpty")
					}
					eodSmall = Exit
				}
				if correctKeyCond() {
					currentBig = On
					currentSmall = OffEmpty
					if debug {
						logger.Println("State is changed: OffEntered to On")
					}
					eodSmall = Exit
				}
			}
			if eodSmall == Exit {
				offEnteredExit()
				eodSmall = Entry
			}
		}
	}
}

func init() {
	currentBig = Off
	currentSmall = OffEmpty
	eodBig = Entry
	eodSmall = Entry
}
