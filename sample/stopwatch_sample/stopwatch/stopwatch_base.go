// Please do not edit this file.

package stopwatch

import (
"log"
)

type State int
const (
Wait State = iota
Run
Stop
)

type Eod int
const (
Entry Eod = iota
Do
Exit
)

var eod Eod
var current State

func task() {
switch current {
case Wait:
if eod == Entry {
waitEntry()
eod = Do
}
if eod == Do {
waitDo()
if pushButtonCond() {
current = Run
log.Println("State is changed: Wait to Run")
eod = Entry
}
}
if eod == Exit {
waitExit()
eod = Entry
}
case Run:
if eod == Entry {
runEntry()
eod = Do
}
if eod == Do {
runDo()
if pushButtonCond() {
current = Stop
log.Println("State is changed: Run to Stop")
eod = Entry
}
}
if eod == Exit {
runExit()
eod = Entry
}
case Stop:
if eod == Entry {
stopEntry()
eod = Do
}
if eod == Do {
stopDo()
if pushButtonCond() {
current = Wait
log.Println("State is changed: Stop to Wait")
eod = Entry
}
}
if eod == Exit {
stopExit()
eod = Entry
}
}
}

func init() {
current = Wait
eod = Entry
}

